import React, { useEffect } from "react";
import Form from "react-bootstrap/Form";
import Button from "react-bootstrap/Button";
import { Col, Row } from "react-bootstrap";
import useApi from "../../../hooks/useApi";
import { useDispatch } from "react-redux";
import { setToken, setUser } from "../../../redux/authSlice";
import { useNavigate } from "react-router-dom";
const LoginPage = () => {
  const api = useApi();
  const dispatch = useDispatch();
  const navigate = useNavigate();

  useEffect(() => {
    (async () => {})();
  }, []);

  async function onFormSubmit(e) {
    e.preventDefault();
    /* 
    formdan bilgiyi doÄŸrudan alÄ±p json haline Ã§evirme 
    yÃ¶ntemini kullnacaÄŸÄ±z bu yÃ¶ntem sayesinde
    her input iÃ§in onchange eventleri yazmaya 
    gerek yok ve componentler gereksiz render
     olmucak ve proje performansÄ± artÄ±cak

     ! Ä°lk AdÄ±m Olarak inputlara name propertylerini set ediyoruz
     ! "e" parametresinden (event) formun kendisine ulaÅŸÄ±p bu formu jsona Ã§eviriyoruz
    */
    /*
   ilk olarak bir html elementi iÃ§indeki verileri toplmak iÃ§in
   formData nesnesi oluÅŸturulur  formData formdaki tÄŸm giriÅŸ
   alanlarÄ±nÄ±n (input,select vb) deÄŸerleri toplamak iÃ§in kullanÄ±labilir
   bu nedenle e.targer Ã¼zerinde alÄ±nan form elementi iÃ§indeki
   verileri temsil eder
   */
    const data = new FormData(e.target);
    /*
    daha sonra FormData nesnesinin iÃ§eriÄŸini bir json nesnesine 
    dÃ¶nÃ¼ÅŸtÃ¼rmek iÃ§in "Object.formEntries()"  yÃ¶ntemi kullanilir

    ve daha sonra ".entries" kullanimi ise bir diziye dÃ¶nÃ¼ÅŸtÃ¼rmesin
    saÄŸlar
    */
    const formJson = Object.fromEntries(data.entries());
    console.warn("ğŸš€  formJson:", formJson);

    const loginResult = await api.post("auth/login", formJson);
    console.warn("ğŸš€ loginResult ~ onFormSubmit ~ loginResult:", loginResult);

    if (loginResult.data.status === "success") {
      dispatch(setToken(loginResult.data.data.token));
      dispatch(setUser(loginResult.data.data.userData));
      navigate("/user");
    } else {
      alert("LÃ¼tfen bilgileri Kontrol Ediniz");
    }
  }
  return (
    <>
      <Row className="justify-content-center">
        <Col sm="12" md="12" lg="6">
          <Form onSubmit={onFormSubmit}>
            <Form.Group className="mb-3" controlId="exampleForm.ControlInput1">
              <Form.Label>Email address</Form.Label>
              <Form.Control
                type="email"
                name="email"
                placeholder="name@example.com"
              />
            </Form.Group>
            <Form.Group
              className="mb-3"
              controlId="exampleForm.ControlTextarea1"
            >
              <Form.Label>Password</Form.Label>
              <Form.Control
                type="password"
                name="password"
                placeholder="*****"
              />
            </Form.Group>

            <Form.Group
              className="mb-3"
              controlId="exampleForm.ControlTextarea1"
            >
              <Button type="submit" variant="primary" className="w-100 mt-3">
                <i className="fa-solid fa-right-to-bracket" />
                &nbsp; Login
              </Button>
            </Form.Group>
          </Form>
        </Col>
      </Row>
    </>
  );
};

export default LoginPage;
